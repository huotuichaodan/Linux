1.vim常用命令

 Vim 中常用的命令
dd   删除（剪切）光标所在整行
5dd  删除（剪切）从光标处开始的 5 行
yy   复制光标所在整行
5yy  复制从光标处开始的 5 行
n    显示搜索命令定位到的下一个字符串
N    显示搜索命令定位到的上一个字符串
u    撤销上一步的操作
p    将之前删除（dd）或复制（yy）过的数据粘贴到光标后面

末行模式中可用的命令
:w      保存
:q      退出
:q!     强制退出（放弃对文档的修改内容）
:wq!    强制保存退出
:set nu 显示行号
:set nonu 不显示行号
:命令   执行该命令
:整数   跳转到该行
:s/one/two     将当前光标所在行的第一个 one 替换成 two
:s/one/two/g   将当前光标所在行的所有 one 替换成 two
:%s/one/two/g  将全文中的所有 one 替换成 two
?字符串     在文本中从下至上搜索该字符串
/字符串     在文本中从上至下搜索该字符串

2.shell

vim example.sh
#!/bin/bash
#For Example BY linuxprobe.com
pwd
ls -al

其中#!是用来告诉系统用那种shell解释器来执行该脚本
第二行的# 是对这个脚本的功能或者某些命令的介绍
在然后 就是脚本的主干内容

3.接收输入参数

直接在脚本后输入，变量之间用空格隔开
sh example.sh one two three four five six
其中如$0 对应的是当前 Shell 脚本程序的名称，$#对应的是总共有几个参数，$*对应的是所有位置的参数值，
$?对应的是显示上一次命令的执行返回值，而$1、$2、$3……则分别对应着第 N 个位置的参数值

4.判断，测试

-d 测试文件是否为目录类型
-e 测试文件是否存在
-f 判断是否为一般文件
-r 测试当前用户是否有权限读取
-w 测试当前用户是否有权限写入
-x 测试当前用户是否有权限执行

测试句格式 [ 条件表达式 ] 括号内两边应各有一个空格
[ -d /etc/fstab ]
echo $?
如果为真，则输出0；否则输出其他数字

逻辑“与”的运算符号是&&，它表示当前面的命令执行成功后才会执行它后面的命令
逻辑“或”的运算符号为||，表示当前面的命令执行失败后才会执行它后面的命令
逻辑“非”的运算符号是！，它表示把条件测试中的判断结果取相反值

可用的整数比较运算符
-eq 是否等于
-ne 是否不等于
-gt 是否大于
-lt 是否小于
-le 是否等于或小于
-ge 是否大于或等于

常见的字符串比较运算符
= 比较字符串内容是否相同
!= 比较字符串内容是否不同
-z 判断字符串内容是否为空

5.流程控制语句
（1）if

格式1: if [ 条件测试语句 ]
          then 命令序列
       fi
       
格式2：if
         then
         else 命令序列
      fi

格式3：if
         then
      elif
         then
      else
      fi

vim chkscore.sh
#!/bin/bash
read -p "Enter your score（0-100）：" GRADE
if [ $GRADE -ge 85 ] && [ $GRADE -le 100 ] ; then
echo "$GRADE is Excellent"
elif [ $GRADE -ge 70 ] && [ $GRADE -le 84 ] ; then
echo "$GRADE is Pass"
else
echo "$GRADE is Fail"
fi

read 是用来读取用户输入信息的命令，能够把接收到的用户输入信息赋值给后面的指定变量，-p 参数用于向用户显示一定的提示信息

（2）for

格式：for 变量名 in 取值列表
     do  
        命令序列
     done

（3）while

格式：while 条件判断
     do
        命令序列
     done

（4）case

格式：
case 变量值 in
模式1）
    命令序列1；；
模式2）
    命令序列2；；
 ..........
*）
   默认命令序列
esac

case 语句是在多个范围内匹配数据，若匹配成功则执行相关命令并结束整个条件测试；
而如果数据不在所列出的范围内，则会去执行星号（*）中所定义的默认命令

6.计划服务

一次性计划：at 时间 
如果想要查看已设置好但还未执行的一次性计划任务，可以使用“at -l”命令；要想将其删除，可以用“atrm 任务序号”

长期计划
创建、编辑计划任务的命令为“crontab -e”，查看当前计划任务的命令为“crontab -l”，删除某条计划任务的命令为“crontab -r”
使用 crond 设置任务的参数字段说明
分 取值为 0～59 的整数
时 取值为 0～23 的任意整数
日 取值为 1～31 的任意整数
月 取值为 1～12 的任意整数
星期 取值为 0～7 的任意整数，其中 0 与 7 均为星期日
命令 要执行的命令或程序脚本
*按照顺序来*

需要说明的是，除了用逗号（,）来分别表示多个时间段，例如“8,9,12”表示 8 月、9 月和 12 月。
还可以用减号（-）来表示一段连续的时间周期（例如字段“日”的取值为“12-15”，则表示每月的 12～15 日）。
以及用除号（/）表示执行任务的间隔时间（例如“*/2”表示每隔2 分钟执行一次任务）

➢ 在 crond 服务的配置参数中，可以像 Shell 脚本那样以#号开头写上注释信息，
这样在日后回顾这段命令代码时可以快速了解其功能、需求以及编写人员等重要信息。
➢ 计划任务中的“分”字段必须有数值，绝对不能为空或是*号，
而“日”和“星期”字段不能同时使用，否则就会发生冲突。
